package com.example.freeqrgenerator.ui.items

import android.Manifest
import android.app.Activity
import android.graphics.Bitmap
import android.graphics.drawable.Drawable
import android.net.Uri
import android.os.Build
import android.widget.Toast
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Rect
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.freeqrgenerator.MainActivityViewModel
import com.example.freeqrgenerator.R
import com.example.freeqrgenerator.error.FreeQrError
import com.example.freeqrgenerator.ui.theme.FreeQrGeneratorTheme
import com.example.freeqrgenerator.ui.utils.Constants.ColorSelectorType
import com.google.accompanist.permissions.ExperimentalPermissionsApi
import com.google.accompanist.permissions.isGranted
import com.google.accompanist.permissions.rememberPermissionState

@OptIn(ExperimentalPermissionsApi::class)
@Composable
fun QrLayout(
    viewModel: MainActivityViewModel = viewModel()
) {
    val context = LocalContext.current
    val contentResolver = LocalContext.current.contentResolver

    val writePermissionState = rememberPermissionState(Manifest.permission.WRITE_EXTERNAL_STORAGE)

    val qrGenerated by viewModel.qrGenerated.collectAsStateWithLifecycle()
    val bitmapGenerated by viewModel.bitmapGenerated.collectAsStateWithLifecycle()
    val showColorPicker by viewModel.shouldShowColorPicker.collectAsStateWithLifecycle()
    val error by viewModel.error.collectAsStateWithLifecycle()

    Content(
        qrGenerated = qrGenerated,
        bitmapGenerated = bitmapGenerated,
        isErrorOnUrl = error == FreeQrError.URL_EMPTY,
        showColorPicker = showColorPicker,
        onUpdateUrl = { viewModel.updateUrl(it) },
        onImageSelected = { viewModel.generateBitmapFromUri(it, contentResolver) },
        showColorSelector = { viewModel.showColorPicker(it) },
        onColorSelected = { viewModel.updateColorSelected(it) },
        onBoundsCalculated = { viewModel.setQrViewAndWindow(it, (context as Activity).window) },
        onSaveQr = {
            if (writePermissionState.status.isGranted || Build.VERSION.SDK_INT >= 33) {
                viewModel.saveImage(
                    context = context,
                    folderName = "FreeQr",
                    callback = {
                        Toast.makeText(
                            context,
                            "Image saved in $it",
                            Toast.LENGTH_LONG
                        ).show()
                    }
                )
            } else {
                writePermissionState.launchPermissionRequest()
            }
        },
        onDismissAction = { viewModel.hideColorPicker() },
    )
}

@Composable
fun Content(
    qrGenerated: Drawable?,
    bitmapGenerated: Bitmap?,
    isErrorOnUrl: Boolean,
    showColorPicker: Boolean,
    onUpdateUrl: (url: String) -> Unit,
    onImageSelected: (uri: Uri?) -> Unit,
    showColorSelector: (type: ColorSelectorType) -> Unit,
    onColorSelected: (color: Color) -> Unit,
    onBoundsCalculated: (bounds: Rect?) -> Unit,
    onSaveQr: () -> Unit,
    onDismissAction: () -> Unit
) {
    if (showColorPicker) {
        CustomColorPickerButton(
            onColorSelected = { onColorSelected(it) },
            onDismissAction = { onDismissAction() }
        )
    }

    Column {
        Row(
            horizontalArrangement = Arrangement.Center,
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier
                .fillMaxWidth()
                .weight(7f)
        ) {
            QrView(
                qrGenerated = qrGenerated,
                bitmapGenerated = bitmapGenerated,
                onBoundsCalculated = { onBoundsCalculated(it) }
            )
        }
        Row(
            modifier = Modifier
                .weight(3f)
        ) {
            Column(
                verticalArrangement = Arrangement.spacedBy(24.dp, Alignment.Bottom),
                modifier = Modifier
                    .fillMaxHeight()
                    .padding(24.dp)
            ) {
                Row(
                    modifier = Modifier.fillMaxWidth()
                ) {
                    UrlInput(
                        onUpdateUrl = { onUpdateUrl(it) },
                        isErrorOnUrl = isErrorOnUrl
                    )
                }
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(24.dp)
                ) {
                    Column(
                        modifier = Modifier.weight(5f),
                        verticalArrangement = Arrangement.spacedBy(16.dp),
                    ) {
                        CustomButton(
                            modifier = Modifier
                                .fillMaxWidth()
                                .weight(5f),
                            text = stringResource(id = R.string.qr_main_color),
                            onClickListener = { showColorSelector(ColorSelectorType.FOREGROUND) }
                        )
                        ChooseImageButton(
                            modifier = Modifier
                                .fillMaxWidth()
                                .weight(5f),
                            text = stringResource(id = R.string.qr_choose_image),
                            onImageSelected = { onImageSelected(it) },
                        )
                    }
                    Column(
                        modifier = Modifier.weight(5f),
                        verticalArrangement = Arrangement.spacedBy(16.dp),
                    ) {
                        CustomButton(
                            modifier = Modifier
                                .fillMaxWidth()
                                .weight(5f),
                            text = stringResource(id = R.string.qr_background_color),
                            onClickListener = { showColorSelector(ColorSelectorType.BACKGROUND) }
                        )
                        CustomButton(
                            modifier = Modifier
                                .fillMaxWidth()
                                .weight(5f),
                            text = stringResource(id = R.string.qr_save_image),
                            onClickListener = { onSaveQr() }
                        )
                    }
                }
            }
        }
    }
}
@Preview(showBackground = true, widthDp = 420)
@Composable
fun Preview() {
    FreeQrGeneratorTheme {
        QrLayout(MainActivityViewModel())
    }
}